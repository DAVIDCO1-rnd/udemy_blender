#!/usr/bin/python3
#+
# This script generates an Open Shading Language shader that generates a
# regular panel made up of assorted regions. Invoke this script as follows:
#
#     osl-gen-panel --name=«name» --shape=«shape» «n»
#
# where «name» is the name to give the shader, «shape» indicates the shape
# of the inner region to be highlighted (currently-valid values are “circle”
# or “square”), and «n» is a positive integer indicating the number of
# possible output values.
#
# The generated shader will have four inputs:
#
#     point Coord, float Time -- the input coordinates and time value
#     float Margin -- the margin gap to leave around the edge of each
#         grid element
#     float Proportion -- the proportion of grid elements for which
#         to return a nonzero output value
#
# and one output:
#
#     int Select -- the output integer value
#
# The resulting shader pattern consists of a square grid, spaced at integer
# input coordinates. Within each square, the output integer value is 0 within
# the margin, and some pseudorandom value in 0 .. «n» in the interior.
# This value could be used to select a colour or shader, for example,
# where a nonzero integer selects an emission shader, while 0 indicates
# that the grid element remains unlit.
#
# Possible uses include rendering an instrument panel full of multicoloured
# lights, or an array of lighted windows on the side of a highrise building.
#
# Copyright 2016 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
# Licensed under CC-BY <http://creativecommons.org/licenses/by/4.0/>.
#-

import sys
import getopt

shapes = \
    {
        "circle" :
            "length(offset) < (1.0 - Margin) / 2.0",
        "square" :
            " && ".join
              (
                "abs(offset[%d]) < (1.0 - Margin) / 2.0" % i
                for i in range(3)
              ),
    }

shader_name = None
shape_name = None
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["name=", "shape="]
  )
for keyword, value in opts :
    if keyword == "--name" :
        shader_name = value
    elif keyword == "--shape" :
        shape_name = value
        if shape_name not in shapes :
            raise ValueError \
              (
                    "--shape value must be in (%s)"
                %
                    ", ".join(sorted(shapes.keys()))
              )
        #end if
    #end if
#end for
if shader_name == None or shape_name == None :
    raise getopt.GetoptError("forgot to specify --name or --shape")
#end if
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the maximum selector integer value")
#end if
maxsel = int(args[0])

sys.stdout.write \
  (
        "shader %(name)s\n"
        "  (\n"
        "    point Coord = P,\n"
        "    float Time = 0.0,\n"
        "    float Margin = 0.1,\n"
        "    float Proportion = 0.5,\n"
        "    output int Select = 0\n"
        "  )\n"
        "  /* generated by osl-gen-panel. */\n"
        "  {\n"
        "    point x = noise(\"cell\", Coord, Time);\n"
        "    if (x[0] <= Proportion)\n"
        "      {\n"
        "        point offset = mod(Coord, point(1)) - point(0.5);\n"
        "        if (%(margin_test)s)\n"
        "          {\n"
        "            Select = (int)round(x[1] * %(selrange)d + 1);\n"
        "          }\n"
        "        else\n"
        "          {\n"
        "            Select = 0;\n"
        "          } /*if*/\n"
        "      }\n"
        "    else\n"
        "      {\n"
        "        Select = 0;\n"
        "      } /*if*/\n"
        "  } /*%(name)s*/\n"
    %
      {
        "name" : shader_name,
        "margin_test" : shapes[shape_name],
        "selrange" : maxsel - 1,
      }
  )
